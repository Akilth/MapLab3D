function plot_osm_rawdata
% Creates a plot of all nodes and ways

global OSMDATA ELE GV PP

try
	
	if isempty(ELE)||isempty(GV)||isempty(PP)
		errormessage(sprintf(['Error:\n',...
			'Before creating a OSM raw data preview,\n',...
			'you have to load the OSM and elevation data.']));
	end
	
	% Display state
	t_start_statebusy		= clock;
	display_on_gui('state','Create OSM raw data preview ...','busy','add');
	
	
	% Number of ways:
	iwmax		= size(OSMDATA.way,2);
	
	% ifs_tb: Index of the tile base filter settings in ELE.elefiltset.
	color_prio_v		= [PP.color.prio];
	icol_tilebase		= find(color_prio_v==0,1);
	icolspec_tilebase	= PP.color(icol_tilebase,1).spec;		% should be =1
	ifs_tb				= ELE.ifs_v(icolspec_tilebase,1);
	
	% Create a new figure:
	hf=figure;
	figure_theme(hf,'set',[],'light');
	set(hf,'Tag','maplab3d_figure');
	set(hf,'Name','OSM');
	set(hf,'NumberTitle','off');
	ha=axes;
	hold(ha,'on');
	xlabel(ha,'x / mm');
	ylabel(ha,'y / mm');
	title(sprintf('nodes and ways\n%s',GV.osm_pathfilename),'Interpreter','none');
	
	% Plotting:
	h1	= plot(ha,[...
		OSMDATA.bounds.xmin_mm ...
		OSMDATA.bounds.xmax_mm ...
		OSMDATA.bounds.xmax_mm ...
		OSMDATA.bounds.xmin_mm ...
		OSMDATA.bounds.xmin_mm],[...
		OSMDATA.bounds.ymin_mm ...
		OSMDATA.bounds.ymin_mm ...
		OSMDATA.bounds.ymax_mm ...
		OSMDATA.bounds.ymax_mm ...
		OSMDATA.bounds.ymin_mm],'-g');
	h2	= plot(ha,[...
		ELE.elefiltset(ifs_tb,1).xmin_mm ...
		ELE.elefiltset(ifs_tb,1).xmax_mm ...
		ELE.elefiltset(ifs_tb,1).xmax_mm ...
		ELE.elefiltset(ifs_tb,1).xmin_mm ...
		ELE.elefiltset(ifs_tb,1).xmin_mm],[...
		ELE.elefiltset(ifs_tb,1).ymin_mm ...
		ELE.elefiltset(ifs_tb,1).ymin_mm ...
		ELE.elefiltset(ifs_tb,1).ymax_mm ...
		ELE.elefiltset(ifs_tb,1).ymax_mm ...
		ELE.elefiltset(ifs_tb,1).ymin_mm],'-m');
	for iw=1:iwmax
		h4	= plot(ha,OSMDATA.way(1,iw).x_mm,OSMDATA.way(1,iw).y_mm,'-b');
	end
	h3	= plot(ha,OSMDATA.node_x_mm,OSMDATA.node_y_mm,'.r');
	axis(ha,'equal');
	legend(ha,[h1;h2;h3;h4],...
		'Limits of the OSM data',...
		'Limits of the elevation data',...
		'Nodes',...
		'Ways');
	drawnow;
	
	% Display state:
	t_end_statebusy		= clock;
	dt_statebusy			= etime(t_end_statebusy,t_start_statebusy);
	dt_statebusy_str		= dt_string(dt_statebusy);
	display_on_gui('state',...
		sprintf('Create OSM raw data preview ... done (%s).',dt_statebusy_str),...
		'notbusy','replace');
	
catch ME
	errormessage('',ME);
end

