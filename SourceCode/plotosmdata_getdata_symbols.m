function [id_sym_node_cv,id_sym_way_cv]=plotosmdata_getdata_symbols(...
	iobj,...
	itable_obj_eqtags_ioeqt,...		% Vektor of indices in OSMDATA_TABLE to be considered
	force_keep_data,...
	filter_nla_separatly,...
	isym_symbol_eqtags,...
	itable_symbol_eqtags,...
	text_tag_symbol_eqtags,...
	id_sym_node_cv,...
	id_sym_way_cv,...
	read_relations,...
	read_nodes_ways,...
	obj_eqtags_ioeqt)
% Collect the data of all symbols
% Used in plotosmdata_getdata

global GV PP PLOTDATA OSMDATA_TABLE OSMDATA_TABLE_INWR OSMDATA

try
	
	for iseqt=1:length(itable_symbol_eqtags)
		connways_eqtags	= connect_ways([]);
		create_map_log_firstline	= false;
		iseqt_has_data		= false;
		if ~isempty(itable_symbol_eqtags{1,1})
			
			% Read the OSM-data:
			if GV.get_nodes_ways_repeatedly_symbols
				id_sym_node_cv{iseqt,1}		= zeros(0,1);
				id_sym_way_cv{iseqt,1}		= zeros(0,1);
			end
			if read_relations
				for i_itable=1:length(itable_symbol_eqtags{iseqt,1})
					itable							= itable_symbol_eqtags{iseqt,1}(i_itable,1);
					if any(itable==itable_obj_eqtags_ioeqt)
						if strcmp(OSMDATA_TABLE.Type(itable),'relation')
							[~,~,~,connways_eqtags,~,id_sym_node_cv{iseqt,1},id_sym_way_cv{iseqt,1}] = getdata_relation(...
								OSMDATA_TABLE_INWR(itable),...		% ir
								connways_eqtags,...						% connways
								iobj,...										% iobj
								itable,...									% lino
								PLOTDATA.obj(iobj,1).linewidth,...	% liwi
								[],...										% in_relation_v
								id_sym_node_cv{iseqt,1},...			% id_sym_node_cv
								id_sym_way_cv{iseqt,1});				% id_sym_way_cv
							iseqt_has_data		= true;
						end
					end
				end
			end
			if GV.get_nodes_ways_repeatedly_symbols
				id_sym_node_cv{iseqt,1}		= zeros(0,1);
				id_sym_way_cv{iseqt,1}		= zeros(0,1);
			end
			if read_nodes_ways
				for i_itable=1:length(itable_symbol_eqtags{iseqt,1})
					itable							= itable_symbol_eqtags{iseqt,1}(i_itable,1);
					if any(itable==itable_obj_eqtags_ioeqt)
						switch OSMDATA_TABLE.Type(itable)
							case 'node'
								if ~any(OSMDATA.id.node(1,OSMDATA_TABLE_INWR(itable))==id_sym_node_cv{iseqt,1})
									x	= OSMDATA.node_x_mm(1,OSMDATA_TABLE_INWR(itable));
									y	= OSMDATA.node_y_mm(1,OSMDATA_TABLE_INWR(itable));
									if ~isnan(x)&&~isnan(y)
										connways_eqtags		= connect_ways(connways_eqtags,[],x,y,...
											iobj,itable,PLOTDATA.obj(iobj,1).linewidth,1);
										if ~GV.get_nodes_ways_repeatedly_symbols
											id_sym_node_cv{iseqt,1}(end+1,1)	= OSMDATA.id.node(1,OSMDATA_TABLE_INWR(itable));
										end
									end
									iseqt_has_data		= true;
								end
							case 'way'
								if ~any(OSMDATA.id.way(1,OSMDATA_TABLE_INWR(itable))==id_sym_way_cv{iseqt,1})
									x	= OSMDATA.way(1,OSMDATA_TABLE_INWR(itable)).x_mm;
									y	= OSMDATA.way(1,OSMDATA_TABLE_INWR(itable)).y_mm;
									[xc,yc]	= polysplit(x,y);
									for ic=1:size(xc,1)
										connways_eqtags		= connect_ways(connways_eqtags,[],xc{ic,1},yc{ic,1},...
											iobj,itable,PLOTDATA.obj(iobj,1).linewidth,1);
										if ~GV.get_nodes_ways_repeatedly_symbols
											if ic==1
												id_sym_way_cv{iseqt,1}(end+1,1)	= OSMDATA.id.way(1,OSMDATA_TABLE_INWR(itable));
											end
										end
									end
									iseqt_has_data		= true;
								end
						end
					end
				end
			end
			
			if iseqt_has_data
				
				% Filter small objects out:
				% After that, connways_eqtags_filt contains only objects that fulfill the conditions.
				% The areas are filtered after the polygons have been calculated, since the shape of the areas
				% can change by moving the outlines: see:	call_symboleqtags2poly
				%														symboleqtags2poly
				%														getdata_refpoints
				%														connways_center
				%														plotosmdata_simplify_moveoutline
				connways_eqtags_filt	= connect_ways([]);
				connways_eqtags_filt	= plotosmdata_getdata_filterout(...
					connways_eqtags,...
					connways_eqtags_filt,...
					PP.obj(iobj,1).symbolpar.mindimx,...
					PP.obj(iobj,1).symbolpar.mindimy,...
					PP.obj(iobj,1).symbolpar.mindiag,...
					PP.obj(iobj,1).symbolpar.minlength,...
					-999999,...				% Special case: The areas are not filtered, regardless of the other limit values.
					filter_nla_separatly,...
					force_keep_data,...
					obj_eqtags_ioeqt);
				
				% Create the symbol polygons and add the symbols to PLOTDATA: nodes
				
				% Symbols and symbol texts are always plotted individually and appear individually in the list of
				% the map objects.
				% It is possible that the same symbol is used for different map objects. This means that the same
				% symbols can have different symbol texts, e.g. the names of various railway stops.
				% Because the symbol texts are only assigned if the symbol texts of all elements in
				% connways_eqtags_filt or connways_eqtags_select are the same (see assignment of symbol_eqtags_text_key
				% and symbol_eqtags_text_val below), the nodes are added here individually.
				% This means that all symbol texts are retained.
				if ~isempty(connways_eqtags_filt.nodes)
					for r=1:size(connways_eqtags_filt.nodes.xy,1)
						connways_eqtags_select				= connect_ways([]);
						connways_eqtags_select.nodes.xy	= connways_eqtags_filt.nodes.xy(r,:);
						call_symboleqtags2poly(...
							iobj,...
							iseqt,...
							create_map_log_firstline,...
							force_keep_data,...
							filter_nla_separatly,...
							obj_eqtags_ioeqt,...
							isym_symbol_eqtags(iseqt,1),...
							itable_symbol_eqtags{iseqt,1},...
							connways_eqtags_select,...
							text_tag_symbol_eqtags{iseqt,1});
					end
					connways_eqtags_filt.nodes		= [];
				end
				
				% Create the symbol polygons and add the symbols to PLOTDATA: lines and areas:
				if    (size(connways_eqtags_filt.lines,1)>0)||...
						(size(connways_eqtags_filt.areas,1)>0)
					if filter_nla_separatly==0
						call_symboleqtags2poly(...
							iobj,...
							iseqt,...
							create_map_log_firstline,...
							force_keep_data,...
							filter_nla_separatly,...
							obj_eqtags_ioeqt,...
							isym_symbol_eqtags(iseqt,1),...
							itable_symbol_eqtags{iseqt,1},...
							connways_eqtags_filt,...
							text_tag_symbol_eqtags{iseqt,1});
					else
						for k_line=1:size(connways_eqtags_filt.lines,1)
							connways_eqtags_select					= connect_ways([]);
							connways_eqtags_select.lines			= connways_eqtags_filt.lines(k_line,1);
							connways_eqtags_select.lines_role	= connways_eqtags_filt.lines_role(k_line,1);
							connways_eqtags_select.lines_norel	= connways_eqtags_filt.lines_norel(k_line,1);
							connways_eqtags_select.xy_start		= connways_eqtags_filt.xy_start(k_line,1);
							connways_eqtags_select.xy_end			= connways_eqtags_filt.xy_end(k_line,1);
							connways_eqtags_select.lino_max		= connways_eqtags_filt.lino_max;
							lino_v										= connways_eqtags_filt.lines(k_line,1).xy(:,4);
							% alt 1:
							% connways_eqtags_select	= connect_ways([]);
							% connways_eqtags_select	= connect_ways(...
							% 	connways_eqtags_select,...
							% 	[],...
							% 	connways_eqtags_filt.lines(k_line,1).xy(:,1),...
							% 	connways_eqtags_filt.lines(k_line,1).xy(:,2));
							% alt 2:
							% connways_eqtags_select.lines	= connways_eqtags_filt.lines(k_line,1);
							create_map_log_firstline	= call_symboleqtags2poly(...
								iobj,...
								iseqt,...
								create_map_log_firstline,...
								force_keep_data,...
								filter_nla_separatly,...
								obj_eqtags_ioeqt,...
								isym_symbol_eqtags(iseqt,1),...
								itable_symbol_eqtags{iseqt,1},...
								connways_eqtags_select,...
								text_tag_symbol_eqtags{iseqt,1});
						end
						for k_area=1:size(connways_eqtags_filt.areas,1)
							connways_eqtags_select					= connect_ways([]);
							connways_eqtags_select.areas			= connways_eqtags_filt.areas(k_area,1);
							connways_eqtags_select.areas_role	= connways_eqtags_filt.areas_role(k_area,1);
							connways_eqtags_select.areas_norel	= connways_eqtags_filt.areas_norel(k_area,1);
							% alt 1:
							% connways_eqtags_select			= connect_ways([]);
							% connways_eqtags_select	= connect_ways(...
							% 	connways_eqtags_select,...
							% 	[],...
							% 	connways_eqtags_filt.areas(k_area,1).xy(:,1),...
							% 	connways_eqtags_filt.areas(k_area,1).xy(:,2));
							% alt 2:
							% connways_eqtags_select.areas	= connways_eqtags_filt.areas(k_area,1);
							create_map_log_firstline	= call_symboleqtags2poly(...
								iobj,...
								iseqt,...
								create_map_log_firstline,...
								force_keep_data,...
								filter_nla_separatly,...
								obj_eqtags_ioeqt,...
								isym_symbol_eqtags(iseqt,1),...
								itable_symbol_eqtags{iseqt,1},...
								connways_eqtags_select,...
								text_tag_symbol_eqtags{iseqt,1});
						end
					end
				end
				
			end
			
		end
		
	end
	
catch ME
	errormessage('',ME);
end


function create_map_log_firstline=call_symboleqtags2poly(...
	iobj,...
	iseqt,...
	create_map_log_firstline,...
	force_keep_data,...
	filter_nla_separatly,...
	obj_eqtags_ioeqt,...
	isym_symbol_eqtags_iseqt,...			% isym_symbol_eqtags(iseqt,1)
	itable_symbol_eqtags_iseqt,...		% itable_symbol_eqtags{iseqt,1}
	connways_eqtags_select,...
	text_tag_symbol_eqtags_iseqt)
% Create the symbol polygons and add the symbols to PLOTDATA

global PLOTDATA PP GV

try
	
	% Create the symbol polygons:
	obj_purpose				= {'map object'};
	[  pd_poly_symb_bgd,...
		pd_poly_symb_obj,...
		pd_ud_symb_bgd,...
		pd_ud_symb_obj,...
		pd_pos_refpoints]	= symboleqtags2poly(...
		iobj,...
		isym_symbol_eqtags_iseqt,...
		PLOTDATA.obj(iobj,1).symb_eqtags{iseqt,1},...
		itable_symbol_eqtags_iseqt,...
		connways_eqtags_select,...
		obj_purpose);
	
	if numboundaries(pd_poly_symb_bgd)>0
		
		% Add the symbols to PLOTDATA:
		PLOTDATA.obj(iobj,1).symb(iseqt,1).poly_symb_bgd	= [...
			PLOTDATA.obj(iobj,1).symb(iseqt,1).poly_symb_bgd;...
			pd_poly_symb_bgd];
		PLOTDATA.obj(iobj,1).symb(iseqt,1).poly_symb_obj	= [...
			PLOTDATA.obj(iobj,1).symb(iseqt,1).poly_symb_obj;...
			pd_poly_symb_obj];
		PLOTDATA.obj(iobj,1).symb(iseqt,1).ud_symb_bgd		= [...
			PLOTDATA.obj(iobj,1).symb(iseqt,1).ud_symb_bgd;...
			pd_ud_symb_bgd];
		PLOTDATA.obj(iobj,1).symb(iseqt,1).ud_symb_obj		= [...
			PLOTDATA.obj(iobj,1).symb(iseqt,1).ud_symb_obj;...
			pd_ud_symb_obj];
		if ~isequal(...
				size(PLOTDATA.obj(iobj,1).symb(iseqt,1).poly_symb_bgd),...
				size(PLOTDATA.obj(iobj,1).symb(iseqt,1).poly_symb_obj)    )||~isequal(...
				size(PLOTDATA.obj(iobj,1).symb(iseqt,1).poly_symb_bgd),...
				size(PLOTDATA.obj(iobj,1).symb(iseqt,1).ud_symb_bgd)    )||~isequal(...
				size(PLOTDATA.obj(iobj,1).symb(iseqt,1).poly_symb_bgd),...
				size(PLOTDATA.obj(iobj,1).symb(iseqt,1).ud_symb_obj)      )
			errormessage;
		end
		
		% Reference points:
		PLOTDATA.obj(iobj,1).symb(iseqt,1).pos_refpoints	= [...
			PLOTDATA.obj(iobj,1).symb(iseqt,1).pos_refpoints;...
			pd_pos_refpoints];
		
		% Symbol description:
		% Get itable: itable is saved as line number above:
		itable_v	= [];
		if ~isempty(connways_eqtags_select.nodes)
			itable_v	= connways_eqtags_select.nodes.xy(:,4);
		end
		if ~isempty(connways_eqtags_select.lines)
			for k_line=1:size(connways_eqtags_select.lines,1)
				itable_v	= unique([itable_v;connways_eqtags_select.lines(k_line,1).xy(:,4)]);
			end
		end
		if ~isempty(connways_eqtags_select.areas)
			for k_area=1:size(connways_eqtags_select.areas,1)
				itable_v	= unique([itable_v;connways_eqtags_select.areas(k_area,1).xy(:,4)]);
			end
		end
		% itable_v should be unique.
		% If a way has been connected by different lines in OSMDATA_TABLE, maybe this is not the case.
		% Check if there is all the same a unique symbol text:
		if isscalar(itable_v)
			symbol_eqtags_text_key	= text_tag_symbol_eqtags_iseqt{itable_v,1};
			symbol_eqtags_text_val	= text_tag_symbol_eqtags_iseqt{itable_v,2};
		else
			symbol_eqtags_text_key	= text_tag_symbol_eqtags_iseqt{itable_v(1,1),1};
			symbol_eqtags_text_val	= text_tag_symbol_eqtags_iseqt{itable_v(1,1),2};
			for i=2:length(itable_v)
				if ~strcmp(symbol_eqtags_text_key,text_tag_symbol_eqtags_iseqt{itable_v(i,1),1})
					symbol_eqtags_text_key	= '';
					symbol_eqtags_text_val	= '';
					break
				end
				if ~strcmp(symbol_eqtags_text_val,text_tag_symbol_eqtags_iseqt{itable_v(i,1),2})
					symbol_eqtags_text_key	= '';
					symbol_eqtags_text_val	= '';
					break
				end
			end
		end
		for k=1:size(pd_poly_symb_bgd,1)
			PLOTDATA.obj(iobj,1).symb(iseqt,1).symbol_eqtags_text{end+1,1}	= symbol_eqtags_text_key;
			PLOTDATA.obj(iobj,1).symb(iseqt,1).symbol_eqtags_text{end  ,2}	= symbol_eqtags_text_val;
		end
		
		% Source plots:
		% The source plots are made visible, if the corresponding text or symbol is selected.
		% This makes it easier to move the texts and symbols to the right place when editing the map.
		for k=1:size(pd_poly_symb_bgd,1)
			PLOTDATA.obj(iobj,1).symb(iseqt,1).source(end+1,1).connways	= connways_eqtags_select;
		end
		
		% Add the colornumber to PLOTDATA.colno_v:
		PLOTDATA.obj(iobj,1).colno_symb_fgd	= PLOTDATA.obj(iobj,1).symb(iseqt,1).ud_symb_obj.color_no;
		PLOTDATA.obj(iobj,1).colno_symb_bgd	= PLOTDATA.obj(iobj,1).symb(iseqt,1).ud_symb_bgd.color_no;
		if ~isequal(PLOTDATA.obj(iobj,1).colno_symb_fgd,0)
			PLOTDATA.colno_v					= unique([PLOTDATA.colno_v;PLOTDATA.obj(iobj,1).colno_symb_fgd]);
		end
		if ~isequal(PLOTDATA.obj(iobj,1).colno_symb_bgd,0)
			PLOTDATA.colno_v					= unique([PLOTDATA.colno_v;PLOTDATA.obj(iobj,1).colno_symb_bgd]);
		end
		
	end
	
	% "Create map" log:
	if ~create_map_log_firstline
		GV.log.create_map.text	= sprintf('%s      | %5.0f | ',GV.log.create_map.text,iseqt);
		symb_eqtags_iseqt_1	= PLOTDATA.obj(iobj,1).symb_eqtags{iseqt,1};
		symb_eqtags_iseqt_1	= symb_eqtags_iseqt_1(1:min(33,length(symb_eqtags_iseqt_1)));
		GV.log.create_map.text	= sprintf('%ssymbs: ''%s''%s | ',GV.log.create_map.text,symb_eqtags_iseqt_1,blanks(33-length(symb_eqtags_iseqt_1)));
		create_map_log_firstline	= true;
	else
		GV.log.create_map.text	= sprintf('%s      |       |                                            | ',GV.log.create_map.text);
	end
	connways_eqtags_filt	= connect_ways([]);
	[~,...
		dx_all_mm,...
		dy_all_mm,...
		diag_all_mm,...
		length_all_mm,...
		area_all_mm2]	= plotosmdata_getdata_filterout(...
		connways_eqtags_select,...
		connways_eqtags_filt,...
		PP.obj(iobj,1).symbolpar.mindimx,...
		PP.obj(iobj,1).symbolpar.mindimy,...
		PP.obj(iobj,1).symbolpar.mindiag,...
		PP.obj(iobj,1).symbolpar.minlength,...
		PP.obj(iobj,1).symbolpar.minarea,...
		filter_nla_separatly,...
		force_keep_data,...
		obj_eqtags_ioeqt);
	GV.log.create_map.text	= sprintf('%s%8.3f | ',GV.log.create_map.text,dx_all_mm);
	GV.log.create_map.text	= sprintf('%s%8.3f | ',GV.log.create_map.text,dy_all_mm);
	GV.log.create_map.text	= sprintf('%s%8.3f | ',GV.log.create_map.text,diag_all_mm);
	GV.log.create_map.text	= sprintf('%s%8.3f | ',GV.log.create_map.text,length_all_mm);
	GV.log.create_map.text	= sprintf('%s%8.3f | ',GV.log.create_map.text,area_all_mm2);
	if force_keep_data
		GV.log.create_map.text	= sprintf('%s   X |\n',GV.log.create_map.text);
	else
		GV.log.create_map.text	= sprintf('%s     |\n',GV.log.create_map.text);
	end
	% OSMDATA_TABLE
	setbreakpoint=1;
	
catch ME
	errormessage('',ME);
end

